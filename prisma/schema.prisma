// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  userName  String     @unique
  email     String     @unique
  password  String
  isDeleted Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blog      Blog[]
  profile   Profile?
  role      Role?
  followers Follower[]
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  DELETED
}

model Blog {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  imageUrl    String?
  isDeleted   Boolean    @default(false)
  status      BlogStatus @default(PUBLISHED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  views       Int        @default(0)
  tags        Json?
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  Int?       @unique
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Profile {
  id        Int       @id @default(autoincrement())
  firstName String?
  lastName  String?
  bio       String?
  avatarUrl String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?      @unique()
}

enum RoleType {
  USER
  ADMIN
}

model Role {
  id     Int      @id @default(autoincrement())
  role   RoleType @default(USER)
  user   User?    @relation(fields: [userId], references: [id])
  userId Int?     @unique
}

model Follower {
  id         Int  @id @default(autoincrement())
  followerId Int
  user       User @relation(fields: [userId], references: [id])
  userId     Int

  @@unique([userId, followerId])
}

model Category {
  id       Int    @id @default(autoincrement())
  category String @unique()
  blog     Blog?
}

model Comment {
  id      Int    @id @default(autoincrement())
  comment String
  userId  Int
  blog    Blog   @relation(fields: [blogId], references: [id])
  blogId  Int
}

model Like {
  id      Int  @id @default(autoincrement())
  blog    Blog @relation(fields: [blogId], references: [id])
  blogId  Int
  likedBy Int

  @@unique([blogId, likedBy])
}
